function [ activity, power, f, domFreqs ] = WTAnalysis( data, fs, waveletType )%WTANALYSIS performs frequency analysis and activity analysis%using the continuous wavelet-transform.% Input:%   data - 3D array of extracted video data (width x height x frames)%   fs - Sampling frequency of the input data%   waveletType - Specifies which wavelet to use for the wavelet transform (morl by default)%                 possible values: dog, morl, morlex, morl0, mexh, paul or bump% Output:%   activity - Activity resulting from the continous wavelet transform%   power - Power of resulting continuous wavelet transform%   f - Frequency range%   domFreqs - Dominant frequency per region of interest % Check inputacceptableWavelets = ['dog' 'morl' 'morlex' 'morl0' 'mexh' 'paul' 'bump'];if nargin < 3    waveletType = 'morl';elseif ~strmatch(waveletType, acceptableWavelets)    error('Input ERROR: Expected wavelet type to be: dog, morl, morlex, morl0, mexh, paul or bump')end% Reorder dimensionsdata = single(permute(data,[3,1,2]));   % Use single because of memory% Center frequency of wavelet-typef0 = centfrq(waveletType);dt = 1/fs;scales = helperCWTTimeFreqVector(1,45,f0,dt,16);% Define empty array for the activityactivity = zeros(size(data, 2), size(data, 3));% Perform CWT ROI-wisepower = zeros(length(scales), size(data,2), size(data,3));for row = 1:size(data,2)    for col = 1:size(data,3)        cwt_res = cwtft({data(:,row,col), dt},'wavelet',waveletType,'scales',scales);        p = abs(cwt_res.cfs).^2;        power(:, row, col) = mean(p,2);        activity(row, col) = abs(cwt_res.meanSIG);    endendf = cwt_res.frequencies;% Get index of dominant frequencies > 1Hz per ROIvalidFreq = find(f>1 & f<fs/2);f = f(validFreq);power = power(validFreq(:),:,:);[~, domFreqIdx] = max(power);% Get pixel-wise dominant frequenciesdomFreqs = f(domFreqIdx);domFreqs = squeeze(domFreqs);% Apply gaussian filter to activityh = fspecial('gaussian', 3, 1);activity = imfilter(squeeze(activity), h);end